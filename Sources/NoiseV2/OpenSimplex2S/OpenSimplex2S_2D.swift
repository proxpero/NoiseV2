extension OpenSimplex2S {
    public func evaluate(_ x: Double, _ y: Double) -> Double {
        let x = x * frequency
        let y = y * frequency
        switch variant2D {
        case .classic:
            let s = skew2D * (x + y)
            let xs = x + s
            let ys = y + s
            return Double(unskewedBase(xs, ys))
        case .improveX:
            let xx = x * root2over2
            let yy = y * (root2over2 * (1 + 2 * skew2D))
            return Double(unskewedBase(yy + xx, yy - xx))
        }
    }
    
    func unskewedBase(_ xs: Double, _ ys: Double) -> Float {
        let xsb = xs.rounded(.down)
        let ysb = ys.rounded(.down)

        let xi = Float(xs - xsb)
        let yi = Float(ys - ysb)

        let xsbp = Int(xsb).multipliedReportingOverflow(by: primeX).partialValue
        let ysbp = Int(ysb).multipliedReportingOverflow(by: primeY).partialValue

        // Unskew
        let t = (xi + yi) * unskew2D
        let dx0 = xi + t
        let dy0 = yi + t

        // First vertex
        let a0 = rSquared2D - dx0 * dx0 - dy0 * dy0

        var result: Float = 0.0

        func updateResult(
            initialA: Float? = nil,
            xp: Int, yp: Int,
            dxa: Float, dya: Float
        ) {
            let dx = dx0 + dxa
            let dy = dy0 + dya
            let a = initialA ?? rSquared2D - dx * dx - dy * dy
            guard a > 0 else { return }
            result += (a * a) * (a * a) * Self.grad(
                seed: seed,
                xsvp: xsbp.addingReportingOverflow(xp).partialValue, ysvp: ysbp.addingReportingOverflow(yp).partialValue,
                dx: dx, dy: dy
            )
        }

        updateResult(initialA: a0, xp: 0, yp: 0, dxa: 0, dya: 0)

        // Second vertex.
        updateResult(
            initialA: (2 * (1 + 2 * unskew2D) * (1 / unskew2D + 2)) * t + (-2 * (1 + 2 * unskew2D) * (1 + 2 * unskew2D) + a0),
            xp: primeX, yp: primeY,
            dxa: -(1 + 2 * unskew2D), dya: -(1 + 2 * unskew2D)
        )

        let xmyi = xi - yi

        if t < unskew2D {
            if xi + xmyi > 1 {
                updateResult(xp: primeX << 1, yp: primeY, dxa: -(3 * unskew2D + 2), dya: -(3 * unskew2D + 1))
            } else {
                updateResult(xp: 0, yp: primeY, dxa: -unskew2D, dya: -(unskew2D + 1))
            }

            if yi - xmyi > 1 {
                updateResult(xp: primeX, yp: primeY << 1, dxa: -(3 * unskew2D + 1), dya: -(3 * unskew2D + 2))
            } else {
                updateResult(xp: primeX, yp: 0, dxa: -(unskew2D + 1), dya: -unskew2D)
            }
        } else {
            if xi + xmyi < 0 {
                updateResult(xp: -primeX, yp: 0, dxa: 1 + unskew2D, dya: unskew2D)
            } else {
                updateResult(xp: primeX, yp: 0, dxa: -(unskew2D + 1), dya: -unskew2D)
            }

            if yi < xmyi {
                updateResult(xp: 0, yp: -primeY, dxa: unskew2D, dya: unskew2D + 1)
            } else {
                updateResult(xp: 0, yp: primeY, dxa: -unskew2D, dya: -(unskew2D + 1))
            }
        }

        return result
    }

    static func grad(seed: Int, xsvp: Int, ysvp: Int, dx: Float, dy: Float) -> Float {
        var hash = (seed ^ xsvp) ^ ysvp
        hash = hash.multipliedReportingOverflow(by: hashMultiplier).partialValue
        hash = hash ^ (hash >> (64 - nGrads2DExponent + 1))
        let gi = Int(Int32(truncatingIfNeeded: hash) & ((nGrads2D - 1) << 1))
        return gradient2d[gi | 0] * dx + gradient2d[gi | 1] * dy
    }
}

private let gradient2d: [Float] = [6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543,
]
