extension OpenSimplex2S {
    public func evaluate(_ x: Double, _ y: Double) -> Double {
        let x = x * frequency
        let y = y * frequency
        switch variant2D {
        case .classic:
            let s = (x + y) * .skew2D
            return unskewedBase(x + s, y + s)
        case .improveX:
            let xx = x * .root2over2
            let yy = y * (.root2over2 * (1 + 2 * .skew2D))
            return unskewedBase(yy + xx, yy - xx)
        }
    }
    
    func unskewedBase(_ xs: Double, _ ys: Double) -> Double {
        let xsb = xs.rounded(.down)
        let ysb = ys.rounded(.down)

        let xi = xs - xsb
        let yi = ys - ysb

        let xsbp = Int(xsb).multipliedReportingOverflow(by: .primeX).partialValue
        let ysbp = Int(ysb).multipliedReportingOverflow(by: .primeY).partialValue

        // Unskew
        let t = (xi + yi) * .unskew2D
        let dx0 = xi + t
        let dy0 = yi + t

        // First vertex
        let a0 = .rSquared2D - dx0 * dx0 - dy0 * dy0

        var result = 0.0

        func updateResult(
            a: Double? = nil,
            x: Int, y: Int,
            dx: Double, dy: Double
        ) {
            let dx = dx0 + dx
            let dy = dy0 + dy
            let a = a ?? .rSquared2D - dx * dx - dy * dy
            guard a > 0 else { return }
            result += (a * a) * (a * a) * Self.grad(
                seed: seed,
                xsvp: xsbp.addingReportingOverflow(x).partialValue,
                ysvp: ysbp.addingReportingOverflow(y).partialValue,
                dx: dx, dy: dy
            )
        }

        updateResult(a: a0, x: 0, y: 0, dx: 0, dy: 0)

        // Second vertex.
        updateResult(
            a: (2 * (1 + 2 * .unskew2D) * (1 / .unskew2D + 2)) * t + (-2 * (1 + 2 * .unskew2D) * (1 + 2 * .unskew2D) + a0),
            x: .primeX,
            y: .primeY,
            dx: -(1 + 2 * .unskew2D),
            dy: -(1 + 2 * .unskew2D)
        )

        let xmyi = xi - yi

        if t < .unskew2D {
            if xi + xmyi > 1 {
                updateResult(x: .primeX << 1, y: .primeY, dx: -(3 * .unskew2D + 2), dy: -(3 * .unskew2D + 1))
            } else {
                updateResult(x: 0, y: .primeY, dx: -.unskew2D, dy: -(.unskew2D + 1))
            }

            if yi - xmyi > 1 {
                updateResult(x: .primeX, y: .primeY << 1, dx: -(3 * .unskew2D + 1), dy: -(3 * .unskew2D + 2))
            } else {
                updateResult(x: .primeX, y: 0, dx: -(.unskew2D + 1), dy: -.unskew2D)
            }
        } else {
            if xi + xmyi < 0 {
                updateResult(x: -.primeX, y: 0, dx: 1 + .unskew2D, dy: .unskew2D)
            } else {
                updateResult(x: .primeX, y: 0, dx: -(.unskew2D + 1), dy: -.unskew2D)
            }

            if yi < xmyi {
                updateResult(x: 0, y: -.primeY, dx: .unskew2D, dy: .unskew2D + 1)
            } else {
                updateResult(x: 0, y: .primeY, dx: -.unskew2D, dy: -(.unskew2D + 1))
            }
        }

        return result
    }

    static func grad(seed: Int, xsvp: Int, ysvp: Int, dx: Double, dy: Double) -> Double {
        var hash = (seed ^ xsvp) ^ ysvp
        hash = hash.multipliedReportingOverflow(by: .hashMultiplier).partialValue
        hash = hash ^ (hash >> (64 - .nGrads2DExponent + 1))
        let gi = Int(Int(truncatingIfNeeded: hash) & ((.nGrads2D - 1) << 1))
        return gradient2d[gi | 0] * dx + gradient2d[gi | 1] * dy
    }
}

private let gradient2d: [Double] = [
    6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.853375273706543, 2.3810538312857545, 18.085899431608684, 11.105002821476075, 14.472321442420789, 14.472321442420789, 11.105002821476075, 18.085899431608684, 2.3810538312857363, 18.085899431608684, -2.3810538312857363, 14.472321442420789, -11.105002821476058, 11.105002821476075, -14.472321442420789, 2.3810538312857545, -18.085899431608684, -2.3810538312857545, -18.085899431608684, -11.105002821476075, -14.472321442420789, -14.472321442420789, -11.105002821476075, -18.085899431608684, -2.3810538312857545, -18.085899431608684, 2.3810538312857363, -14.472321442420789, 11.105002821476075, -11.105002821476075, 14.472321442420789, -2.3810538312857545, 18.085899431608684, 6.980896610132626, 16.853375273706543, 16.853375273706543, 6.980896610132626, 16.853375273706543, -6.980896610132626, 6.980896610132626, -16.853375273706543, -6.980896610132626, -16.853375273706543, -16.853375273706543, -6.980896610132626, -16.853375273706543, 6.980896610132626, -6.980896610132626, 16.85337527370654
]
