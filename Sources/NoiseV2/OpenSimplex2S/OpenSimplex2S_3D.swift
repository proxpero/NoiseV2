extension OpenSimplex2S {
    public func evaluate(_ x: Double, _ y: Double, _ z: Double) -> Double {
        let x = x * frequency
        let y = y * frequency
        let z = z * frequency
        switch variant3D {
        case .classic:
            let r = fallbackRotate3 * (x + y + z)
            let xr = r - x
            let yr = r - y
            let zr = r - z
            return unrotatedBase(xr: xr, yr: yr, zr: zr)
        case .improveXY:
            let xy = x + y
            let s2 = xy * rotate3Orthagonalizer
            let zz = z * root3over3
            let xr = x + s2 + zz
            let yr = y + s2 + zz
            let zr = xy * -root3over3 + zz
            return unrotatedBase(xr: xr, yr: yr, zr: zr)
        case .improveXZ:
            let xz = x + z
            let s2 = xz * -0.211324865405187
            let yy = y * root3over3
            let xr = x + s2 + yy
            let zr = z + s2 + yy
            let yr = xz * -root3over3 + yy
            return unrotatedBase(xr: xr, yr: yr, zr: zr)
        }
    }
}

extension OpenSimplex2S {
    func unrotatedBase(xr: Double, yr: Double, zr: Double) -> Double {
        let xrb = xr.rounded(.down)
        let yrb = yr.rounded(.down)
        let zrb = zr.rounded(.down)

        let xi = xr - xrb
        let yi = yr - yrb
        let zi = zr - zrb

        // Prime pre-multiplication for hash. Also flip seed for second lattice copy.
        let xrbp = Int(xrb).multipliedReportingOverflow(by: primeX).partialValue
        let yrbp = Int(yrb).multipliedReportingOverflow(by: primeY).partialValue
        let zrbp = Int(zrb).multipliedReportingOverflow(by: primeZ).partialValue
        let seed2 = seed ^ -0x52D547B2E96ED629

        let xNMask = Int(-0.5 - xi)
        let yNMask = Int(-0.5 - yi)
        let zNMask = Int(-0.5 - zi)

        // First vertex.
        let x0 = Double(xi) + Double(xNMask)
        let y0 = Double(yi) + Double(yNMask)
        let z0 = Double(zi) + Double(zNMask)

        let a0 = rSquared3D - x0 * x0 - y0 * y0 - z0 * z0

        var result = 0.0

        func updateResult(
            a: Double? = nil,
            seed: Int,
            xrbpm: Int, yrbpm: Int, zrbpm: Int,
            dx: Double, dy: Double, dz: Double
        ) {
            let x = x0 + dx
            let y = y0 + dy
            let z = z0 + dz
            let a = a ?? rSquared3D - x * x - y * y - z * z
            result += (a * a) * (a * a) * Self.grad(
                seed: seed,
                xrvp: xrbp.addingReportingOverflow(xrbpm).partialValue,
                yrvp: yrbp.addingReportingOverflow(yrbpm).partialValue,
                zrvp: zrbp.addingReportingOverflow(zrbpm).partialValue,
                dx: x, dy: y, dz: z
            )
        }

        // First vertex
        updateResult(
            seed: seed,
            xrbpm: xNMask & primeX,
            yrbpm: yNMask & primeY,
            zrbpm: zNMask & primeZ,
            dx: 0, dy: 0, dz: 0
        )

        // Second vertex
        updateResult(
            seed: seed2,
            xrbpm: primeX,
            yrbpm: primeY,
            zrbpm: primeZ,
            dx: -Double(xNMask) - 0.5,
            dy: -Double(yNMask) - 0.5,
            dz: -Double(zNMask) - 0.5
        )

        let x1 = xi - 0.5
        let y1 = yi - 0.5
        let z1 = zi - 0.5
        let a1 = rSquared3D - x1 * x1 - y1 * y1 - z1 * z1

        let xAFlipMask0 = Double((xNMask | 1) << 1) * x1
        let yAFlipMask0 = Double((yNMask | 1) << 1) * y1
        let zAFlipMask0 = Double((zNMask | 1) << 1) * z1
        let xAFlipMask1 = Double(-2 - (xNMask << 2)) * x1 - 1.0
        let yAFlipMask1 = Double(-2 - (yNMask << 2)) * y1 - 1.0
        let zAFlipMask1 = Double(-2 - (zNMask << 2)) * z1 - 1.0

        var skip5 = false
        let a2 = xAFlipMask0 + a0
        if a2 > 0 {
            updateResult(
                a: a2, seed: seed,
                xrbpm: ~xNMask & primeX, yrbpm: yNMask & primeY, zrbpm: zNMask & primeZ,
                dx: -Double(xNMask | 1), dy: 0, dz: 0
            )
        } else {
            let a3 = yAFlipMask0 + zAFlipMask0 + a0
            if a3 > 0 {
                updateResult(
                    a: a3, seed: seed,
                    xrbpm: xNMask & primeX, yrbpm: ~yNMask & primeY, zrbpm: ~zNMask & primeZ,
                    dx: 0, dy: -Double(yNMask | 1), dz: -Double(zNMask | 1)
                )
            }

            let a4 = xAFlipMask1 + a1
            if a4 > 0 {
                updateResult(
                    a: a4, seed: seed2,
                    xrbpm: xNMask & (primeX.multipliedReportingOverflow(by: 2).partialValue), yrbpm: primeY, zrbpm: primeZ,
                    dx: Double(xNMask | 1) + x1 - x0, dy: y1 - y0, dz: z1 - z0
                )
                skip5 = true
            }
        }

        var skip9 = false
        let a6 = yAFlipMask0 + a0
        if a6 > 0 {
            updateResult(
                a: a6, seed: seed,
                xrbpm: xNMask & primeX, yrbpm: ~yNMask & primeY, zrbpm: zNMask & primeZ,
                dx: 0, dy: -Double(yNMask | 1), dz: 0
            )
        } else {
            let a7 = xAFlipMask0 + zAFlipMask0 + a0
            if a7 > 0 {
                updateResult(
                    a: a7, seed: seed,
                    xrbpm: ~xNMask & primeX, yrbpm: yNMask & primeY, zrbpm: ~zNMask & primeZ,
                    dx: -Double(xNMask | 1), dy: 0, dz: -Double(zNMask | 1)
                )
            }

            let a8 = yAFlipMask1 + a1
            if a8 > 0 {
                updateResult(
                    a: a8, seed: seed2,
                    xrbpm: primeX, yrbpm: yNMask & (primeY << 1), zrbpm: primeZ,
                    dx: x1 - x0, dy: Double(yNMask | 1) + y1 - y0, dz: z1 - z0
                )
                skip9 = true
            }
        }

        var skipD = false
        let aA = zAFlipMask0 + a0
        if aA > 0 {
            updateResult(
                a: aA, seed: seed,
                xrbpm: xNMask & primeX, yrbpm: yNMask & primeY, zrbpm: ~zNMask & primeZ,
                dx: 0, dy: 0, dz: -Double(zNMask | 1)
            )
        } else {
            let aB = xAFlipMask0 + yAFlipMask0 + a0
            if aB > 0 {
                updateResult(
                    a: aB, seed: seed,
                    xrbpm: ~xNMask & primeX, yrbpm: ~yNMask & primeY, zrbpm: zNMask & primeZ,
                    dx: -Double(xNMask | 1), dy: -Double(yNMask | 1), dz: 0
                )
            }

            let aC = zAFlipMask1 + a1
            if aC > 0 {
                updateResult(
                    a: aC, seed: seed2,
                    xrbpm: primeX, yrbpm: primeY, zrbpm: zNMask & (primeZ << 1),
                    dx: x1 - x0, dy: y1 - y0, dz: Double(zNMask | 1) + z1 - z0
                )
                skipD = true
            }
        }

        if !skip5 {
            let a5 = yAFlipMask1 + zAFlipMask1 + a1
            if a5 > 0 {
                updateResult(
                    a: a5, seed: seed2,
                    xrbpm: primeX, yrbpm: yNMask & (primeY << 1), zrbpm: zNMask & (primeZ << 1),
                    dx: x1 - x0, dy: Double(yNMask | 1) + y1 - y0, dz: Double(zNMask | 1) + z1 - z0)
            }
        }

        if !skip9 {
            let a9 = xAFlipMask1 + zAFlipMask1 + a1
            if a9 > 0 {
                updateResult(
                    a: a9, seed: seed2,
                    xrbpm: xNMask & primeX.multipliedReportingOverflow(by: 2).partialValue, yrbpm: primeY, zrbpm: zNMask & (primeZ << 1),
                    dx: Double(xNMask | 1) + x1 - x0, dy: y1 - y0, dz: Double(zNMask | 1) + z1 - z0
                )
            }
        }

        if !skipD {
            let aD = xAFlipMask1 + yAFlipMask1 + a1
            if aD > 0 {
                updateResult(
                    a: aD, seed: seed2,
                    xrbpm: xNMask & (primeX << 1), yrbpm: yNMask & (primeY << 1), zrbpm: primeZ,
                    dx: Double(xNMask | 1) + x1 - x0, dy: Double(yNMask | 1) + y1 - y0, dz: z1 - z0
                )
            }
        }

        return Double(result)
    }

    static func grad(seed: Int, xrvp: Int, yrvp: Int, zrvp: Int, dx: Double, dy: Double, dz: Double) -> Double {
        var hash = (seed ^ xrvp) ^ (yrvp ^ zrvp)
        hash = hash.multipliedReportingOverflow(by: hashMultiplier).partialValue
        hash = hash ^ (hash >> (64 - nGrads3DExponent + 2))
        let gi = Int(Int(truncatingIfNeeded: hash) & ((nGrads3D - 1) << 2))
        return gradient3d[gi | 0] * dx + gradient3d[gi | 1] * dy + gradient3d[gi | 2] * dz
    }
}

let gradient3d: [Double] = [
    7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 0.0, -7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, 0.0, -3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, -3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, -7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, 0.0, -7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, -4.213452452462707, 0.0, -11.093991495146318, 0.0, -11.093991495146318, 0.0, -4.213452452462707, 0.0, -7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, -11.093991495146318, 0.0, 4.213452452462707, 0.0, -4.213452452462707, 0.0, 11.093991495146318, 0.0, -3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, -3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, 0.0, 7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, 11.093991495146318, 0.0, -4.213452452462707, 0.0, 4.213452452462707, 0.0, -11.093991495146318, 0.0, 7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, 4.213452452462707, 0.0, 11.093991495146318, 0.0, 11.093991495146318, 0.0, 4.213452452462707, 0.0, 7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 0.0, -7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, 0.0, -3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, -3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, -7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, 0.0, -7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, -4.213452452462707, 0.0, -11.093991495146318, 0.0, -11.093991495146318, 0.0, -4.213452452462707, 0.0, -7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, -11.093991495146318, 0.0, 4.213452452462707, 0.0, -4.213452452462707, 0.0, 11.093991495146318, 0.0, -3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, -3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, 0.0, 7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, 11.093991495146318, 0.0, -4.213452452462707, 0.0, 4.213452452462707, 0.0, -11.093991495146318, 0.0, 7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, 4.213452452462707, 0.0, 11.093991495146318, 0.0, 11.093991495146318, 0.0, 4.213452452462707, 0.0, 7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 0.0, -7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, 0.0, -3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, -3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, -7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, 0.0, -7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, -4.213452452462707, 0.0, -11.093991495146318, 0.0, -11.093991495146318, 0.0, -4.213452452462707, 0.0, -7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, -11.093991495146318, 0.0, 4.213452452462707, 0.0, -4.213452452462707, 0.0, 11.093991495146318, 0.0, -3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, -3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, 0.0, 7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, 11.093991495146318, 0.0, -4.213452452462707, 0.0, 4.213452452462707, 0.0, -11.093991495146318, 0.0, 7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, 4.213452452462707, 0.0, 11.093991495146318, 0.0, 11.093991495146318, 0.0, 4.213452452462707, 0.0, 7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 0.0, -7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, 0.0, -3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, -3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, -7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, 0.0, -7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, -4.213452452462707, 0.0, -11.093991495146318, 0.0, -11.093991495146318, 0.0, -4.213452452462707, 0.0, -7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, -11.093991495146318, 0.0, 4.213452452462707, 0.0, -4.213452452462707, 0.0, 11.093991495146318, 0.0, -3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, -3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, 0.0, 7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, 11.093991495146318, 0.0, -4.213452452462707, 0.0, 4.213452452462707, 0.0, -11.093991495146318, 0.0, 7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, 4.213452452462707, 0.0, 11.093991495146318, 0.0, 11.093991495146318, 0.0, 4.213452452462707, 0.0, 7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 0.0, -7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, 0.0, -3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, -3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, -7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, 0.0, -7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, -4.213452452462707, 0.0, -11.093991495146318, 0.0, -11.093991495146318, 0.0, -4.213452452462707, 0.0, -7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, -7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, -11.093991495146318, 0.0, 4.213452452462707, 0.0, -4.213452452462707, 0.0, 11.093991495146318, 0.0, -3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, -7.997138591759381, 0.0, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, -3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, 7.997138591759381, 7.997138591759381, 0.0, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 7.997138591759381, -7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, -7.997138591759381, 3.5946317686139184, 0.0, 4.213452452462707, -11.093991495146318, 0.0, 0.0, 11.093991495146318, -4.213452452462707, 0.0, 0.0, 7.997138591759381, -3.5946317686139184, -7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, -7.997138591759381, 0.0, 11.093991495146318, 0.0, -4.213452452462707, 0.0, 4.213452452462707, 0.0, -11.093991495146318, 0.0, 7.997138591759381, -3.5946317686139184, 7.997138591759381, 0.0, 7.997138591759381, 3.5946317686139184, 7.997138591759381, 0.0, 4.213452452462707, 0.0, 11.093991495146318, 0.0, 11.093991495146318, 0.0, 4.213452452462707, 0.0, 7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, 7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, 11.093991495146318, 4.213452452462707, 0.0, 0.0, 4.213452452462707, 11.093991495146318, 0.0, 0.0, -7.997138591759381, 7.997138591759381, -3.5946317686139184, 0.0, -7.997138591759381, 7.997138591759381, 3.5946317686139184, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0, 0.0, -3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, -7.997138591759381, 0.0, 0.0, -11.093991495146318, -4.213452452462707, 0.0, 0.0, -4.213452452462707, -11.093991495146318, 0.0, -3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 3.5946317686139184, -7.997138591759381, 7.997138591759381, 0.0, 0.0, -4.213452452462707, 11.093991495146318, 0.0, 0.0, -11.093991495146318, 4.213452452462707, 0.0
]
